// pxt by @timb :)
;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var pxt, unifont,
    __slice = [].slice;

  pxt = function() {
    var args, f;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    f = pxt.font;
    return f.render.apply(f, args);
  };

  module.exports = pxt;

  unifont = require('./unifont');

  pxt.font_type = 'pixel';

  pxt.font = unifont;

  pxt.init = function(fn_loaded_callback) {
    var f;
    f = pxt.font;
    return f.init(fn_loaded_callback);
  };

  pxt.font_info = function() {
    var f, info;
    f = pxt.font;
    info = {
      char_h: f.char_h
    };
    return info;
  };

  if (typeof window !== "undefined" && window !== null) {
    window.pxt = pxt;
  }

}).call(this);

},{"./unifont":2}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var char_h, char_linefeed, char_w, char_w_full, char_w_half, dom, sheet, sheet_loaded, sheet_pad_left, sheet_pad_left_in_chars, sheet_pad_top, sheet_pad_top_in_chars, sheet_w_in_chars, unifont, url_sheet;

  unifont = {};

  module.exports = unifont;

  dom = {};

  sheet = null;

  sheet_w_in_chars = 256;

  char_w_full = 16;

  char_w_half = 8;

  char_h = unifont.char_h = 16;

  sheet_pad_left_in_chars = 2;

  sheet_pad_top_in_chars = 4;

  sheet_pad_left = sheet_pad_left_in_chars * char_w_full;

  sheet_pad_top = sheet_pad_top_in_chars * char_h;

  char_linefeed = 0x0a;

  url_sheet = 'http://i.imgur.com/kiVf8Hm.png';

  char_w = unifont.char_w = function(char_code) {
    var h, w;
    w = char_w_full;
    h = char_w_half;
    if (char_code <= 0x1f) {
      return w;
    }
    if (char_code <= 0x7e) {
      return h;
    }
    if (char_code <= 0x9f) {
      return w;
    }
    if (char_code <= 0xac) {
      return h;
    }
    if (char_code === 0xad) {
      return w;
    }
    if (char_code <= 0x034e) {
      return h;
    }
    if (char_code > 65535) {
      console.log("too large");
    }
    return w;
  };

  sheet_loaded = function() {};

  unifont.init = function(fn_loaded_callback) {
    var fn_loaded;
    fn_loaded = function() {
      sheet_loaded();
      if (fn_loaded_callback) {
        return fn_loaded_callback();
      }
    };
    sheet = new Image();
    sheet.crossOrigin = 'anonymous';
    sheet.addEventListener("load", fn_loaded);
    return sheet.src = url_sheet;
  };

  unifont.cursor_calculate_pos = function(input, selection) {
    var char_value, chars, i, w, x, y, _i, _ref;
    chars = input.split('');
    x = 0;
    y = 0;
    for (i = _i = 0, _ref = selection.start; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      char_value = chars[i].charCodeAt(0);
      if (char_value === char_linefeed) {
        x = 0;
        y += char_h;
        continue;
      }
      w = char_w(char_value);
      x += w;
    }
    return [x, y];
  };

  unifont.bounds_calc = function(input, x, y) {};

  unifont.render = function(ctx, input, x, y) {
    var char_value, chars, i, w, _i, _ref;
    chars = input.split('');
    x = x || 0;
    y = y || 0;
    for (i = _i = 0, _ref = chars.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      char_value = chars[i].charCodeAt(0);
      if (char_value === char_linefeed) {
        x = 0;
        y += char_h;
        continue;
      }
      w = char_w(char_value);
      unifont.draw_char_on_canvas(char_value, ctx, x, y, w, char_h);
      x += w;
    }
    return 0;
  };

  unifont.draw_char_on_canvas = function(char_value, ctx, ctx_x, ctx_y, w, h) {
    var sheet_x, sheet_y;
    sheet_x = (char_value % sheet_w_in_chars) * char_w_full;
    sheet_x += sheet_pad_left;
    sheet_y = ((char_value / sheet_w_in_chars) | 0) * char_h;
    sheet_y += sheet_pad_top;
    ctx.drawImage(sheet, sheet_x | 0, sheet_y | 0, w, h, ctx_x | 0, ctx_y | 0, w, h);
    return 0;
  };

}).call(this);

},{}]},{},[1])
;